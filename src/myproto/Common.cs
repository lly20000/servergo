// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: common.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace com.fly.rich.msg {

  /// <summary>Holder for reflection information generated from common.proto</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public static partial class CommonReflection {

    #region Descriptor
    /// <summary>File descriptor for common.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static CommonReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cgxjb21tb24ucHJvdG8SB215cHJvdG8iRwoFbG9naW4SDwoHZXJyY29kZRgD",
            "IAEoBRIPCgdtc2d0eXBlGAQgASgFEg8KB3Vzcm5hbWUYBSABKAkSCwoDcGFz",
            "GAYgASgJIjcKB3JlbG9naW4SDwoHZXJyY29kZRgHIAEoBRIMCgRndWlkGAgg",
            "ASgJEg0KBXN0YXRlGAkgASgFIk4KCnJlam9pbnJvb20SDwoHZXJyY29kZRgK",
            "IAEoBRIPCgdtc2d0eXBlGAsgASgFEhAKCGpvaW5zdWNjGAwgASgFEgwKBGd1",
            "aWQYDSABKAkiPQoIam9pbnJvb20SDwoHbXNndHlwZRgLIAEoBRISCgpyb29t",
            "bnVtYmVyGAwgASgFEgwKBGd1aWQYDSABKAlCJgoMY29tLmZseS5yaWNoQgNt",
            "c2eqAhBjb20uZmx5LnJpY2gubXNnYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::com.fly.rich.msg.login), global::com.fly.rich.msg.login.Parser, new[]{ "Errcode", "Msgtype", "Usrname", "Pas" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.fly.rich.msg.relogin), global::com.fly.rich.msg.relogin.Parser, new[]{ "Errcode", "Guid", "State" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.fly.rich.msg.rejoinroom), global::com.fly.rich.msg.rejoinroom.Parser, new[]{ "Errcode", "Msgtype", "Joinsucc", "Guid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.fly.rich.msg.joinroom), global::com.fly.rich.msg.joinroom.Parser, new[]{ "Msgtype", "Roomnumber", "Guid" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// login message 
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class login : pb::IMessage<login> {
    private static readonly pb::MessageParser<login> _parser = new pb::MessageParser<login>(() => new login());
    public static pb::MessageParser<login> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.fly.rich.msg.CommonReflection.Descriptor.MessageTypes[0]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public login() {
      OnConstruction();
    }

    partial void OnConstruction();

    public login(login other) : this() {
      errcode_ = other.errcode_;
      msgtype_ = other.msgtype_;
      usrname_ = other.usrname_;
      pas_ = other.pas_;
    }

    public login Clone() {
      return new login(this);
    }

    /// <summary>Field number for the "errcode" field.</summary>
    public const int ErrcodeFieldNumber = 3;
    private int errcode_;
    /// <summary>
    /// errorcode
    /// </summary>
    public int Errcode {
      get { return errcode_; }
      set {
        errcode_ = value;
      }
    }

    /// <summary>Field number for the "msgtype" field.</summary>
    public const int MsgtypeFieldNumber = 4;
    private int msgtype_;
    /// <summary>
    /// message type
    /// </summary>
    public int Msgtype {
      get { return msgtype_; }
      set {
        msgtype_ = value;
      }
    }

    /// <summary>Field number for the "usrname" field.</summary>
    public const int UsrnameFieldNumber = 5;
    private string usrname_ = "";
    /// <summary>
    /// username
    /// </summary>
    public string Usrname {
      get { return usrname_; }
      set {
        usrname_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "pas" field.</summary>
    public const int PasFieldNumber = 6;
    private string pas_ = "";
    /// <summary>
    /// password
    /// </summary>
    public string Pas {
      get { return pas_; }
      set {
        pas_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public override bool Equals(object other) {
      return Equals(other as login);
    }

    public bool Equals(login other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Errcode != other.Errcode) return false;
      if (Msgtype != other.Msgtype) return false;
      if (Usrname != other.Usrname) return false;
      if (Pas != other.Pas) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Errcode != 0) hash ^= Errcode.GetHashCode();
      if (Msgtype != 0) hash ^= Msgtype.GetHashCode();
      if (Usrname.Length != 0) hash ^= Usrname.GetHashCode();
      if (Pas.Length != 0) hash ^= Pas.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Errcode != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Errcode);
      }
      if (Msgtype != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Msgtype);
      }
      if (Usrname.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Usrname);
      }
      if (Pas.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Pas);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Errcode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Errcode);
      }
      if (Msgtype != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Msgtype);
      }
      if (Usrname.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Usrname);
      }
      if (Pas.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Pas);
      }
      return size;
    }

    public void MergeFrom(login other) {
      if (other == null) {
        return;
      }
      if (other.Errcode != 0) {
        Errcode = other.Errcode;
      }
      if (other.Msgtype != 0) {
        Msgtype = other.Msgtype;
      }
      if (other.Usrname.Length != 0) {
        Usrname = other.Usrname;
      }
      if (other.Pas.Length != 0) {
        Pas = other.Pas;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 24: {
            Errcode = input.ReadInt32();
            break;
          }
          case 32: {
            Msgtype = input.ReadInt32();
            break;
          }
          case 42: {
            Usrname = input.ReadString();
            break;
          }
          case 50: {
            Pas = input.ReadString();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class relogin : pb::IMessage<relogin> {
    private static readonly pb::MessageParser<relogin> _parser = new pb::MessageParser<relogin>(() => new relogin());
    public static pb::MessageParser<relogin> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.fly.rich.msg.CommonReflection.Descriptor.MessageTypes[1]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public relogin() {
      OnConstruction();
    }

    partial void OnConstruction();

    public relogin(relogin other) : this() {
      errcode_ = other.errcode_;
      guid_ = other.guid_;
      state_ = other.state_;
    }

    public relogin Clone() {
      return new relogin(this);
    }

    /// <summary>Field number for the "errcode" field.</summary>
    public const int ErrcodeFieldNumber = 7;
    private int errcode_;
    /// <summary>
    /// errorcode
    /// </summary>
    public int Errcode {
      get { return errcode_; }
      set {
        errcode_ = value;
      }
    }

    /// <summary>Field number for the "guid" field.</summary>
    public const int GuidFieldNumber = 8;
    private string guid_ = "";
    /// <summary>
    /// player guid
    /// </summary>
    public string Guid {
      get { return guid_; }
      set {
        guid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "state" field.</summary>
    public const int StateFieldNumber = 9;
    private int state_;
    /// <summary>
    /// user state
    /// </summary>
    public int State {
      get { return state_; }
      set {
        state_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as relogin);
    }

    public bool Equals(relogin other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Errcode != other.Errcode) return false;
      if (Guid != other.Guid) return false;
      if (State != other.State) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Errcode != 0) hash ^= Errcode.GetHashCode();
      if (Guid.Length != 0) hash ^= Guid.GetHashCode();
      if (State != 0) hash ^= State.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Errcode != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(Errcode);
      }
      if (Guid.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(Guid);
      }
      if (State != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(State);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Errcode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Errcode);
      }
      if (Guid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Guid);
      }
      if (State != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(State);
      }
      return size;
    }

    public void MergeFrom(relogin other) {
      if (other == null) {
        return;
      }
      if (other.Errcode != 0) {
        Errcode = other.Errcode;
      }
      if (other.Guid.Length != 0) {
        Guid = other.Guid;
      }
      if (other.State != 0) {
        State = other.State;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 56: {
            Errcode = input.ReadInt32();
            break;
          }
          case 66: {
            Guid = input.ReadString();
            break;
          }
          case 72: {
            State = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// join room messge
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class rejoinroom : pb::IMessage<rejoinroom> {
    private static readonly pb::MessageParser<rejoinroom> _parser = new pb::MessageParser<rejoinroom>(() => new rejoinroom());
    public static pb::MessageParser<rejoinroom> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.fly.rich.msg.CommonReflection.Descriptor.MessageTypes[2]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public rejoinroom() {
      OnConstruction();
    }

    partial void OnConstruction();

    public rejoinroom(rejoinroom other) : this() {
      errcode_ = other.errcode_;
      msgtype_ = other.msgtype_;
      joinsucc_ = other.joinsucc_;
      guid_ = other.guid_;
    }

    public rejoinroom Clone() {
      return new rejoinroom(this);
    }

    /// <summary>Field number for the "errcode" field.</summary>
    public const int ErrcodeFieldNumber = 10;
    private int errcode_;
    /// <summary>
    /// errorcode
    /// </summary>
    public int Errcode {
      get { return errcode_; }
      set {
        errcode_ = value;
      }
    }

    /// <summary>Field number for the "msgtype" field.</summary>
    public const int MsgtypeFieldNumber = 11;
    private int msgtype_;
    /// <summary>
    /// message type
    /// </summary>
    public int Msgtype {
      get { return msgtype_; }
      set {
        msgtype_ = value;
      }
    }

    /// <summary>Field number for the "joinsucc" field.</summary>
    public const int JoinsuccFieldNumber = 12;
    private int joinsucc_;
    /// <summary>
    /// username
    /// </summary>
    public int Joinsucc {
      get { return joinsucc_; }
      set {
        joinsucc_ = value;
      }
    }

    /// <summary>Field number for the "guid" field.</summary>
    public const int GuidFieldNumber = 13;
    private string guid_ = "";
    /// <summary>
    /// guid
    /// </summary>
    public string Guid {
      get { return guid_; }
      set {
        guid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public override bool Equals(object other) {
      return Equals(other as rejoinroom);
    }

    public bool Equals(rejoinroom other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Errcode != other.Errcode) return false;
      if (Msgtype != other.Msgtype) return false;
      if (Joinsucc != other.Joinsucc) return false;
      if (Guid != other.Guid) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Errcode != 0) hash ^= Errcode.GetHashCode();
      if (Msgtype != 0) hash ^= Msgtype.GetHashCode();
      if (Joinsucc != 0) hash ^= Joinsucc.GetHashCode();
      if (Guid.Length != 0) hash ^= Guid.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Errcode != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(Errcode);
      }
      if (Msgtype != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(Msgtype);
      }
      if (Joinsucc != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(Joinsucc);
      }
      if (Guid.Length != 0) {
        output.WriteRawTag(106);
        output.WriteString(Guid);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Errcode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Errcode);
      }
      if (Msgtype != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Msgtype);
      }
      if (Joinsucc != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Joinsucc);
      }
      if (Guid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Guid);
      }
      return size;
    }

    public void MergeFrom(rejoinroom other) {
      if (other == null) {
        return;
      }
      if (other.Errcode != 0) {
        Errcode = other.Errcode;
      }
      if (other.Msgtype != 0) {
        Msgtype = other.Msgtype;
      }
      if (other.Joinsucc != 0) {
        Joinsucc = other.Joinsucc;
      }
      if (other.Guid.Length != 0) {
        Guid = other.Guid;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 80: {
            Errcode = input.ReadInt32();
            break;
          }
          case 88: {
            Msgtype = input.ReadInt32();
            break;
          }
          case 96: {
            Joinsucc = input.ReadInt32();
            break;
          }
          case 106: {
            Guid = input.ReadString();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class joinroom : pb::IMessage<joinroom> {
    private static readonly pb::MessageParser<joinroom> _parser = new pb::MessageParser<joinroom>(() => new joinroom());
    public static pb::MessageParser<joinroom> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.fly.rich.msg.CommonReflection.Descriptor.MessageTypes[3]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public joinroom() {
      OnConstruction();
    }

    partial void OnConstruction();

    public joinroom(joinroom other) : this() {
      msgtype_ = other.msgtype_;
      roomnumber_ = other.roomnumber_;
      guid_ = other.guid_;
    }

    public joinroom Clone() {
      return new joinroom(this);
    }

    /// <summary>Field number for the "msgtype" field.</summary>
    public const int MsgtypeFieldNumber = 11;
    private int msgtype_;
    /// <summary>
    /// message type
    /// </summary>
    public int Msgtype {
      get { return msgtype_; }
      set {
        msgtype_ = value;
      }
    }

    /// <summary>Field number for the "roomnumber" field.</summary>
    public const int RoomnumberFieldNumber = 12;
    private int roomnumber_;
    /// <summary>
    /// username
    /// </summary>
    public int Roomnumber {
      get { return roomnumber_; }
      set {
        roomnumber_ = value;
      }
    }

    /// <summary>Field number for the "guid" field.</summary>
    public const int GuidFieldNumber = 13;
    private string guid_ = "";
    /// <summary>
    /// guid
    /// </summary>
    public string Guid {
      get { return guid_; }
      set {
        guid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public override bool Equals(object other) {
      return Equals(other as joinroom);
    }

    public bool Equals(joinroom other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Msgtype != other.Msgtype) return false;
      if (Roomnumber != other.Roomnumber) return false;
      if (Guid != other.Guid) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Msgtype != 0) hash ^= Msgtype.GetHashCode();
      if (Roomnumber != 0) hash ^= Roomnumber.GetHashCode();
      if (Guid.Length != 0) hash ^= Guid.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Msgtype != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(Msgtype);
      }
      if (Roomnumber != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(Roomnumber);
      }
      if (Guid.Length != 0) {
        output.WriteRawTag(106);
        output.WriteString(Guid);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Msgtype != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Msgtype);
      }
      if (Roomnumber != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Roomnumber);
      }
      if (Guid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Guid);
      }
      return size;
    }

    public void MergeFrom(joinroom other) {
      if (other == null) {
        return;
      }
      if (other.Msgtype != 0) {
        Msgtype = other.Msgtype;
      }
      if (other.Roomnumber != 0) {
        Roomnumber = other.Roomnumber;
      }
      if (other.Guid.Length != 0) {
        Guid = other.Guid;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 88: {
            Msgtype = input.ReadInt32();
            break;
          }
          case 96: {
            Roomnumber = input.ReadInt32();
            break;
          }
          case 106: {
            Guid = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
